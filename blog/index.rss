<?xml version="1.0"?>
<rss version="2.0"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:dcterms="http://purl.org/dc/terms/" >
<channel>
<title>blog</title>
<link>http://miguel.cc/blog/</link>

<description>miguel.cc</description>
<generator>ikiwiki</generator>
<pubDate>Thu, 03 Dec 2015 17:02:58 -0300</pubDate>
<item>
	<title>Write AWS Lambda functions in Ruby</title>

	<guid isPermaLink="false">http://miguel.cc/blog/entry/write_aws_lambda_functions_in_ruby/</guid>

	<link>http://miguel.cc/blog/entry/write_aws_lambda_functions_in_ruby/</link>



	<category>aws</category>


	<pubDate>Thu, 09 Jul 2015 19:40:26 -0300</pubDate>
	<dcterms:modified>2015-12-03T20:02:58Z</dcterms:modified>


	<description>&lt;p&gt;Since AWS Lambda service release last year &lt;a href=&quot;https://aws.amazon.com/blogs/aws/run-code-cloud/&quot;&gt;announcement&lt;/a&gt;,
I wanted to try this service and I actually did it. I found it very
interesting, powerful and full of possibilities, but to be honest, Node.js is
not really my cup of tea. So, I kept waiting for additional languages support.&lt;/p&gt;

&lt;p&gt;So, with the recent announcement about &lt;a href=&quot;https://aws.amazon.com/blogs/aws/aws-lambda-update-run-java-code-in-response-to-events/&quot;&gt;Java 8 support&lt;/a&gt; for AWS Lambda,
I found an excuse to try it again and for this I decided to use JRuby and
write my test functions in Ruby.&lt;/p&gt;

&lt;p&gt;After stumbling upon and reporting an &lt;a href=&quot;https://forums.aws.amazon.com/thread.jspa?messageID=631100&quot;&gt;issue&lt;/a&gt; with JRuby releases
before 1.7.21, I was finally able to write and run AWS Lambda functions in
Ruby.&lt;/p&gt;

&lt;p&gt;To test this, I took the most &lt;a href=&quot;http://docs.aws.amazon.com/lambda/latest/dg/java-gs.html&quot;&gt;basic example&lt;/a&gt; from
AWS documentation and rewrote in Ruby:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;java&#39;

java_package &#39;example&#39;

java_import &#39;com.amazonaws.services.lambda.runtime.Context&#39;
java_import &#39;com.amazonaws.services.lambda.runtime.LambdaLogger&#39;

class Hello
  java_signature &#39;String handler(int count, Context context)&#39;
  def handler(count, context)
    logger = context.getLogger
    logger.log(&quot;received : #{count}&quot;)
    count.to_s
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To deploy and run that code, you must create an artifact acceptable for
AWS Lambda (mostly .zip and .jar files). You can create those artifacts by
using Maven as is explained in the &lt;a href=&quot;http://docs.aws.amazon.com/lambda/latest/dg/java-create-jar-pkg-maven-no-ide.html&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Your code should end in a location similar to:
&lt;code&gt;proj-dir/src/main/ruby/example/Hello.rb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And you need to add some extra dependencies to use JRuby:&lt;/p&gt;

&lt;p&gt;JRuby (use jruby-complete jar &lt;a href=&quot;http://jruby.org/2015/07/07/jruby-1-7-21.html&quot;&gt;1.7.21&lt;/a&gt; or greater):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.jruby&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;jruby-complete&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.7.21&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JRuby Maven compiler plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;plugin&amp;gt;
  &amp;lt;groupId&amp;gt;de.saumya.mojo&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;jruby-maven-plugin&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.0.10&amp;lt;/version&amp;gt;
  &amp;lt;executions&amp;gt;
    &amp;lt;execution&amp;gt;
      &amp;lt;phase&amp;gt;generate-sources&amp;lt;/phase&amp;gt;
      &amp;lt;goals&amp;gt;
        &amp;lt;goal&amp;gt;compile&amp;lt;/goal&amp;gt;
      &amp;lt;/goals&amp;gt;
      &amp;lt;configuration&amp;gt;
        &amp;lt;generateJava&amp;gt;true&amp;lt;/generateJava&amp;gt;
        &amp;lt;generatedJavaDirectory&amp;gt;${jruby.generated.sources}&amp;lt;/generatedJavaDirectory&amp;gt;
      &amp;lt;/configuration&amp;gt;
    &amp;lt;/execution&amp;gt;
  &amp;lt;/executions&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After adding these extra dependencies and running &lt;code&gt;mvn package&lt;/code&gt; you should have
a .jar file ready to be used with Lambda.&lt;/p&gt;

&lt;p&gt;So far, I only have observed two downsides about using JRuby for
Lambda functions. The first one is, jruby-complete distribution is 20 MB in
size, so I found my functions a little bloated in size.
Hopefully, in the future AWS will add support for more runtimes and this will
not be an issue anymore.&lt;/p&gt;

&lt;p&gt;The second detail is, the first time you run your function you will notice
a very long execution time (around 10s in my case) due to the usual slow JVM
start up time. If you function is executed with relative frequence you will
notice AWS Lambda reuse hardware and will obtain more reasonable execution
times (around 100 ms for trivial functions).&lt;/p&gt;

&lt;p&gt;All in all, I look forward to find more uses for this service and I hope for
more convenient languages (e.g. Ruby, Go, Python, etc) being supported in AWS
Lambda.&lt;/p&gt;

&lt;p&gt;PS. In an AWS event today, it was announced a new service named
&lt;a href=&quot;http://aws.amazon.com/api-gateway/&quot;&gt;&quot;API Gateway&quot;&lt;/a&gt; that can be combined with AWS Lambda as backend
functions to build API endpoints. It&#39;s worth checking out.&lt;/p&gt;

&lt;p&gt;Update (2015/12/03):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/c9katayama&quot;&gt;Akio Katayama&lt;/a&gt; published a &lt;a href=&quot;https://github.com/c9katayama/aws-lambda-jruby&quot;&gt;niftier way&lt;/a&gt; to build your
Lambda functions with JRuby but using gradle instead of plain old Maven. Check it
out!&lt;/p&gt;
</description>


</item>
<item>
	<title>Free Chef server hosted at api.qirtaiba.org</title>

	<guid isPermaLink="false">http://miguel.cc/blog/entry/free_hosted_chef_server/</guid>

	<link>http://miguel.cc/blog/entry/free_hosted_chef_server/</link>



	<category>chef</category>


	<pubDate>Tue, 09 Dec 2014 11:29:26 -0300</pubDate>
	<dcterms:modified>2014-12-09T14:29:26Z</dcterms:modified>


	<description>&lt;p&gt;Since months ago I was pondering over providing an alternative &lt;a href=&quot;https://www.chef.io/&quot;&gt;Chef&lt;/a&gt;
hosted service.&lt;/p&gt;

&lt;p&gt;The timing of the &lt;a href=&quot;https://www.chef.io/blog/2014/09/08/chef-releases-chef-12-to-power-devops-practices-in-the-enterprise/&quot;&gt;recent announcement by Chef, Inc.&lt;/a&gt; converging
and releasing a single code base under Apache 2.0 license for Chef server
certainly makes this initiative even more interesting for me.&lt;/p&gt;

&lt;p&gt;So, I wanted to see if there is interest in such thing and I went ahead to
setup this service.&lt;/p&gt;

&lt;p&gt;The service is free to use and is available at &lt;a href=&quot;https://api.qirtaiba.org/&quot;&gt;api.qirtaiba.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The service is beta but you are more than invited to use it.&lt;/p&gt;

&lt;p&gt;I look forward to hear comments and see what the people think about it.
You can &lt;a href=&quot;mailto:miguel@miguel.cc&quot;&gt;drop me a line&lt;/a&gt; or a &lt;a href=&quot;https://twitter.com/nomadium&quot;&gt;tweet&lt;/a&gt; if you wish.&lt;/p&gt;

&lt;p&gt;Let&#39;s hack and automate.&lt;/p&gt;
</description>


</item>
<item>
	<title>life: 2010-2014</title>

	<guid isPermaLink="false">http://miguel.cc/blog/entry/life_2010_2014/</guid>

	<link>http://miguel.cc/blog/entry/life_2010_2014/</link>


	<pubDate>Sun, 23 Feb 2014 15:37:17 -0300</pubDate>
	<dcterms:modified>2014-02-23T18:37:17Z</dcterms:modified>


	<description>&lt;p&gt;Wow, it looks like the last time I blogged something here was like 3 years
and 7 months or so.&lt;/p&gt;

&lt;p&gt;In that period many things had changed but the most relevant event were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I don&#39;t live anymore in Venezuela.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I became a Debian Developer.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Another important things happened on my personal life but they don&#39;t belong
on this blog anyway.&lt;/p&gt;

&lt;p&gt;It feels good to write something again even if it&#39;s absolutely irrelevant
in the great scheme of things.&lt;/p&gt;
</description>


</item>
<item>
	<title>nomadium APT repository</title>

	<guid isPermaLink="false">http://miguel.cc/blog/entry/nomadium_apt_repo/</guid>

	<link>http://miguel.cc/blog/entry/nomadium_apt_repo/</link>


	<pubDate>Sun, 23 Feb 2014 15:37:17 -0300</pubDate>
	<dcterms:modified>2014-02-23T18:37:17Z</dcterms:modified>


	<description>&lt;p&gt;Well, the reason why I revived this blog (again) was because I wanted
to document the fact I setup what I expect to be an stable APT repo
for packages prepared by myself but not ready to be included in Debian
for whatever reason at the moment.&lt;/p&gt;

&lt;p&gt;It&#39;s available at:
&lt;a href=&quot;http://people.debian.org/~nomadium/apt/&quot;&gt;http://people.debian.org/~nomadium/apt/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Right now I&#39;m working in some projects and I&#39;m using some software
that is outdated, just not available on Debian stable suite or
on stable backports, e.g.:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;chef (&amp;gt;= 11.8)&lt;/li&gt;
&lt;li&gt;docker.io&lt;/li&gt;
&lt;li&gt;mosh&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So, I decided to backport and upload those packages (and their
dependencies) there. Maybe somebody else can find uses for that
until they are included in the next stable release.&lt;/p&gt;
</description>


</item>
<item>
	<title>mongrel2 development</title>

	<guid isPermaLink="false">http://miguel.cc/blog/entry/mongrel2_development/</guid>

	<link>http://miguel.cc/blog/entry/mongrel2_development/</link>


	<pubDate>Fri, 30 Jul 2010 16:36:18 -0300</pubDate>
	<dcterms:modified>2010-07-30T19:36:18Z</dcterms:modified>


	<description>&lt;p&gt;In my opinion you can learn a lot &lt;a href=&quot;http://twitter.com/zedshaw&quot;&gt;following the development process&lt;/a&gt;
of &lt;a href=&quot;http://mongrel2.org/&quot;&gt;Mongrel2&lt;/a&gt;. Mongrel2 is a redesign of Mongrel web server and it
is a project that have as goal to provide an application, language, and network
architecture agnostic web server.&lt;/p&gt;

&lt;p&gt;This is probably the most interesting project that I could find right now on
the web, because it is under heavy development, it is using new concepts and
ideas, it is written in C (&lt;a href=&quot;http://mongrel2.org/artifact?name=0222d9bb954be5237b1f6be69ef62d9a53a1e4dd&quot;&gt;very clear and legible code&lt;/a&gt; if you ask
me), the development process is totally in the open, and this could benefit
many people if successfully achieve its goal.&lt;/p&gt;

&lt;p&gt;Because of that, and because of the very big bold goal of this project I&#39;m
following its progress, I&#39;m testing it and I plan to contribute with Mongrel2
if possible. By now, I&#39;m only contributing from the distribution side of
things, so I prepared some packages necessary to test Mongrel2 in Debian
(despite Mr. Zed Shaw is very critic of the ``slowness&#39;&#39; of Linux distributions
picking new software).&lt;/p&gt;

&lt;p&gt;Anyway, below are some links to binary and source packages for Mongrel2 and a
couple of dependencies, if anyone besides me is interested in testing this
in Debian (or Ubuntu). I already asked for review to have those packages
included officially in Debian.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;mongrel2:
&lt;a href=&quot;http://alioth.debian.org/~nomadium-guest/debian/unstable/mongrel2_0.9.20100730+fossil2037a497b7-1_amd64.deb&quot;&gt;binary&lt;/a&gt;, &lt;a href=&quot;http://alioth.debian.org/~nomadium-guest/debian/unstable/mongrel2_0.9.20100730+fossil2037a497b7-1.dsc&quot;&gt;source&lt;/a&gt;, &lt;a href=&quot;http://git.debian.org/?p=collab-maint/mongrel2.git&quot;&gt;git&lt;/a&gt;,
&lt;a href=&quot;http://mongrel2.org/wiki?name=GettingStarted&quot;&gt;upstream&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;python-storm (needed to use m2sh):
&lt;a href=&quot;http://alioth.debian.org/~nomadium-guest/debian/unstable/python-storm_0.16.0-1_amd64.deb&quot;&gt;binary&lt;/a&gt;, &lt;a href=&quot;http://alioth.debian.org/~nomadium-guest/debian/unstable/storm_0.16.0-1.dsc&quot;&gt;source&lt;/a&gt;, &lt;a href=&quot;http://git.debian.org/?p=users/nomadium-guest/storm.git&quot;&gt;git&lt;/a&gt;,
&lt;a href=&quot;https://storm.canonical.com/#Download&quot;&gt;upstream&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;python-zmq (needed to run the examples included with mongrel2):
&lt;a href=&quot;http://alioth.debian.org/~nomadium-guest/debian/unstable/python-pyzmq_0.1.20100703+git18f5d06155-1_amd64.deb&quot;&gt;binary&lt;/a&gt;, &lt;a href=&quot;http://alioth.debian.org/~nomadium-guest/debian/unstable/pyzmq_0.1.20100703+git18f5d06155-1.dsc&quot;&gt;source&lt;/a&gt;, &lt;a href=&quot;http://git.debian.org/?p=users/nomadium-guest/pyzmq.git&quot;&gt;git&lt;/a&gt;,
&lt;a href=&quot;http://github.com/zeromq/pyzmq&quot;&gt;upstream&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>


</item>
<item>
	<title>ikiwiki + github pages = EPIC win!</title>

	<guid isPermaLink="false">http://miguel.cc/blog/entry/ikiwiki_and_github_pages_equals_epic_win/</guid>

	<link>http://miguel.cc/blog/entry/ikiwiki_and_github_pages_equals_epic_win/</link>


	<pubDate>Mon, 26 Jul 2010 20:30:15 -0300</pubDate>
	<dcterms:modified>2010-07-26T23:30:15Z</dcterms:modified>


	<description>&lt;p&gt;Since a while ago I was aware of the possibility of hosting an ikiwiki
generated website at github using &lt;a href=&quot;http://pages.github.com/&quot;&gt;github pages&lt;/a&gt;.
This is described with great detail on &lt;a href=&quot;http://ikiwiki.info/tips/github/&quot;&gt;tips section of ikiwiki website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Later, it was &lt;a href=&quot;http://github.com/blog/315-cname-support-for-github-pages&quot;&gt;announced the possibility of using custom domains&lt;/a&gt; with github pages, but unfortunately this feature was
available only to paying customers. Don&#39;t get me wrong, github is fantastic
and they provide a service really worth paying for (especially for private
projects), but for a &lt;a href=&quot;http://en.wikipedia.org/wiki/CADIVI&quot;&gt;dollar starved guy like me&lt;/a&gt;, I try to
avoid any expense in foreign currency.&lt;/p&gt;

&lt;p&gt;So, it was cool to find out that the custom domain feature for github pages
now is free. I decided to give a try and migrate this website hosting there.
I could save a few bucks with hosting and gained the feature of updating my
website using git standard tools (pretty awesome and convenient if you ask me,
with one push you can publish updates or revert changes).&lt;/p&gt;

&lt;p&gt;I&#39;m going to investigate options about how to implement the dynamic portion of
ikiwiki (ikiwiki.cgi, and maybe comments), but for now my main use case of
ikiwiki is covered with github pages provided hosting.&lt;/p&gt;
</description>


</item>
<item>
	<title>your own kernel with amazon ec2</title>

	<guid isPermaLink="false">http://miguel.cc/blog/entry/your_own_kernel_with_amazon_ec2/</guid>

	<link>http://miguel.cc/blog/entry/your_own_kernel_with_amazon_ec2/</link>



	<category>debian</category>


	<pubDate>Tue, 20 Jul 2010 00:37:34 -0300</pubDate>
	<dcterms:modified>2010-07-20T03:37:34Z</dcterms:modified>


	<description>&lt;p&gt;Recently,
&lt;a href=&quot;http://aws.typepad.com/aws/2010/07/use-your-own-kernel-with-amazon-ec2.html&quot;&gt;Amazon announced support&lt;/a&gt;
for user provided Linux kernels in Amazon EC2.&lt;/p&gt;

&lt;p&gt;Since they provided a list of supported distributions but Debian was not
included, I decided to give a try to this new feature to see if I could boot a
Linux kernel provided by Debian.&lt;/p&gt;

&lt;p&gt;Following the instructions available in
&lt;a href=&quot;http://ec2-downloads.s3.amazonaws.com/user_specified_kernels.pdf&quot;&gt;EC2 documentation&lt;/a&gt;
and the recommendations for &lt;a href=&quot;http://wiki.debian.org/Xen&quot;&gt;Xen usage&lt;/a&gt; at Debian
wiki, I could boot an AMI using &lt;code&gt;linux-image-2.6.32-5-686-bigmem&lt;/code&gt; kernel
included with upcoming Debian 6.0 (squeeze, right now at testing stage).&lt;/p&gt;

&lt;p&gt;You just have to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Indicate in &lt;code&gt;/boot/grub/menu.lst&lt;/code&gt; &lt;code&gt;root=/dev/xvda1&lt;/code&gt; as root device.&lt;/li&gt;
&lt;li&gt;Make sure &lt;code&gt;/etc/fstab&lt;/code&gt; contains the correct device names.&lt;/li&gt;
&lt;li&gt;Bundle your image with &lt;code&gt;linux-image-2.6.32-5-686-bigmem&lt;/code&gt; and &lt;code&gt;grub-legacy&lt;/code&gt; packages
installed.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In the &lt;a href=&quot;http://wiki.debian.org/Xen&quot;&gt;Xen entry&lt;/a&gt; at Debian wiki is mentioned that
domU instances can boot with a Linux image Xen flavor, but I could not boot
&lt;code&gt;linux-image-2.6.32-5-xen-686&lt;/code&gt; in Amazon EC2. I&#39;ll investigate why that&#39;s
happening.&lt;/p&gt;
</description>


</item>

</channel>
</rss>
